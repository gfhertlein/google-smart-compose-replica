{"version":3,"sources":["dictionaries/words.js","components/ChatBox/ChatBox.js","index.js"],"names":["WordsList","this","wordsList","newWords","MAX_NUMBER_OF_LETTERS_CHECKED","MIN_CHAR_DIFFERENCE_BETWEEN_WORD_AND_ABBR","setCursor","wordLength","el","document","getElementById","range","createRange","sel","window","getSelection","setStart","childNodes","collapse","removeAllRanges","addRange","ChatBox","updateMessage","e","autoCompleteWord","which","type","state","toggleAutoComplete","learnNewWords","triggerSuggestions","text","char","textBeforeUpdate","target","innerText","autocompletion","words","slice","length","setState","matchedTerm","matchedWord","html","newCursor","Object","keys","ReactDOM","findDOMNode","chatBox","current","focus","updatedCursor","preventDefault","inputtedText","inputtedArr","split","lastWord","wordIfMatched","checkIfLastWordMatchesExistingWords","word","noAutocompletionText","matchText","substring","validText","filter","existingWordsList","getWordsList","tempWordsList","forEach","isWordAlreadyInList","wordToCheck","values","isAbbrAlreadyInList","abbrToCheck","abbr","twoWordSubstring","threeWordSubstring","fourWordSubstring","isWordWithinMinLength","setWordsList","React","createRef","evt","addEventListener","wordMatchesCases","2","3","4","default","wordsAbbrList","className","map","key","ref","contentEditable","id","rows","dangerouslySetInnerHTML","__html","aria-label","PureComponent","mountNode","hydrate"],"mappings":"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","file":"static/js/main.0683a5db.chunk.js","sourcesContent":["export const WordsList = {\n  get getWordsList() {\n    return this.wordsList ? this.wordsList : {};\n  },\n  set setWordsList(newWords) {\n    if(!this.wordsList) {\n      this.wordsList = {};\n    }\n    this.wordsList = {\n      ...this.wordsList,\n      ...newWords\n    };\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Chatbox.css';\nimport { WordsList } from '../../dictionaries/words';\n\nconst MAX_NUMBER_OF_LETTERS_CHECKED = 4;\nconst MIN_CHAR_DIFFERENCE_BETWEEN_WORD_AND_ABBR = 2;\n\nconst setCursor = (wordLength) => {\n  const el = document.getElementById(\"box\");\n  const range = document.createRange();\n  const sel = window.getSelection();\n  range.setStart(el.childNodes[0], wordLength);\n  range.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(range);\n};\n\nclass ChatBox extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      matchedTerm: '',\n      matchedWord: false,\n      html: '',\n      words: WordsList.getWordsList\n    }\n    this.chatBox = React.createRef();\n  }\n\n  componentDidMount() {\n    ['keydown', 'keyup'].forEach(evt => {\n      this.chatBox.current.addEventListener(evt, this.updateMessage, false);\n    });\n  }\n\n  checkIfLastWordMatchesExistingWords (word)  {\n    const wordMatchesCases = {\n      2: () => this.state.words[word.slice(0, 2)] ? { word: this.state.words[word.slice(0, 2)], char: 2 } : {},\n      3: () => this.state.words[word.slice(0, 3)] ? { word: this.state.words[word.slice(0, 3)], char: 3 } : {},\n      4: () => this.state.words[word.slice(0, 4)] ? { word: this.state.words[word.slice(0, 4)], char: 4 } : {},\n      default: {}\n    };\n    return word && wordMatchesCases[word.length] ? wordMatchesCases[word.length]() : wordMatchesCases.default\n  }\n\n  updateMessage = (e) => {\n    this.autoCompleteWord(e);\n    if(e.which === 32 && e.type === 'keydown' && this.state.toggleAutoComplete) {\n      this.learnNewWords();\n    }\n  }\n\n  triggerSuggestions = (e, text, char) => {\n    const textBeforeUpdate = e.target.innerText;\n    const autocompletion = this.state.words[text].slice(char, this.state.words[text].length);\n    this.setState({\n      matchedTerm: autocompletion,\n      matchedWord: true,\n      html: `${e.target.innerText}<span class=\"autocompletion-text\">${autocompletion}</span>`\n    });\n    const newCursor = textBeforeUpdate.length;\n    setCursor(newCursor);\n  }\n\n  autoCompleteWord = (e) => {\n    if(e.which === 8) {\n      return;\n    }\n\n    if(!Object.keys(this.state.words).length) {\n      return;\n    }\n\n    if(e.which === 13 && this.state.matchedWord) {\n      this.setState({\n        html: e.target.innerText,\n        matchedWord: false,\n      });\n\n      ReactDOM.findDOMNode(this.chatBox.current).focus();\n      const updatedCursor = e.target.innerText.length;\n      setCursor(updatedCursor);\n      e.preventDefault();\n    }\n\n    if(e.which !== 13 && this.state.matchedWord) {\n      this.setState({\n        html: e.target.innerText.slice(0, -this.state.matchedTerm.length),\n        matchedTerm: '',\n        matchedWord: false\n      });\n      setCursor(this.state.html.length);\n    }\n\n    const inputtedText = e.target.innerText;\n    const inputtedArr = inputtedText.split(' ');\n    const lastWord = inputtedArr[inputtedArr.length - 1];\n    const wordIfMatched = lastWord ? this.checkIfLastWordMatchesExistingWords(lastWord) : {};\n\n    if (wordIfMatched.word) {\n      const noAutocompletionText = inputtedText.split(' ');\n      const matchText = noAutocompletionText[noAutocompletionText.length - 1].substring(0, wordIfMatched.char);\n      this.triggerSuggestions(e, matchText, wordIfMatched.char);\n    }\n  }\n\n  learnNewWords = () => {\n    const fullText = this.chatBox.current.innerText;\n    const validText = fullText.split(' ').filter((word) => {\n      if(word.length >= MAX_NUMBER_OF_LETTERS_CHECKED) {\n        return word;\n      }\n    });\n\n    if(!validText.length) {\n      return;\n    }\n    \n    const existingWordsList = WordsList.getWordsList;\n    const tempWordsList = {};\n    validText.forEach((word) => {\n      const isWordAlreadyInList = (wordToCheck) => !!Object.values(WordsList.getWordsList).filter(word => word === wordToCheck).length\n      const isAbbrAlreadyInList = (abbrToCheck) => !!Object.keys(WordsList.getWordsList).filter(abbr => abbr === abbrToCheck).length;\n      const twoWordSubstring = word.substring(0, 2);\n      const threeWordSubstring = word.substring(0, 3);\n      const fourWordSubstring = word.substring(0, 4);\n      const isWordWithinMinLength = (substring) =>  word.length - substring.length >= MIN_CHAR_DIFFERENCE_BETWEEN_WORD_AND_ABBR;\n\n      if(!existingWordsList[twoWordSubstring] && isWordWithinMinLength(twoWordSubstring) && !isWordAlreadyInList(word) && !isAbbrAlreadyInList(twoWordSubstring)) {\n        tempWordsList[twoWordSubstring] = word;\n        return;\n      }\n\n      if(!existingWordsList[threeWordSubstring] && isWordWithinMinLength(threeWordSubstring) && !isWordAlreadyInList(word) && !isAbbrAlreadyInList(threeWordSubstring)) {\n        tempWordsList[threeWordSubstring] = word;\n        return;\n      }\n\n      if(!existingWordsList[fourWordSubstring] && isWordWithinMinLength(fourWordSubstring) && !isWordAlreadyInList(word) && !isAbbrAlreadyInList(fourWordSubstring)) {\n        tempWordsList[fourWordSubstring] = word;\n        return;\n      }\n    });\n\n    WordsList.setWordsList = tempWordsList;\n    this.setState({\n      ...this.state,\n      words: WordsList.getWordsList\n    })\n  }\n\n  render () {\n    const { words } = this.state;\n    const wordsAbbrList = Object.keys(words);\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          {\n            wordsAbbrList.length ?<div className=\"wordsList\">\n           <ul className=\"list-group\">\n            <li className=\"list-group-item active\">Learned words&nbsp; \n              <span className=\"badge badge-warning badge-pill\"> {wordsAbbrList.length}</span>\n            </li>\n            {\n              wordsAbbrList.map(abbr => {\n                return (<li className=\"list-group-item\" key={abbr}>{ `${abbr} - ${this.state.words[abbr]}` }</li>)\n              })\n            }\n            </ul>\n          </div>  : null\n          }\n        </div>\n        <div className=\"card col-md-6\">\n        <h5 className=\"card-header\">\n          Google smart compose replica\n          {/* <button type=\"button\" onClick={() => this.toggleAutoComplete()} className=\"btn btn-sm btn-outline-danger float-right\">\n            Autocomplete&nbsp;\n            <span className=\"badge badge-primary\"></span>\n          </button> */}\n        </h5>\n        <div className=\"card-body\">\n        <div className=\"ChatBox\">\n            <div className=\"ChatBoxMessage\">\n            <div className=\"input-group\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Message box</span>\n              </div>\n              <div\n                ref={this.chatBox}\n                contentEditable={true}\n                className=\"form-control box\"\n                id=\"box\"\n                rows=\"5\"\n                dangerouslySetInnerHTML={ { __html: this.state.html } }\n                aria-label=\"Message\"/>\n            </div>\n            </div>\n            <br/>\n          </div>\n          <div>\n            <ul>\n              <li>\n                To autocomplete an existing abbreviation from the list press ENTER.\n              </li>\n              <li>\n                Words must have a min length of 4 characters.\n              </li>\n              <li>\n                Words must have at least 2 characters between the abbreviation and the actual word.\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatBox;","import ReactDOM from 'react-dom';\nimport ChatBox from './components/ChatBox/ChatBox';\nimport React from 'react';\nconst mountNode = document.getElementById('root');\nReactDOM.hydrate(\n  <ChatBox />,\n  mountNode\n);"],"sourceRoot":""}